
JavaScript是一门具有自动垃圾收集机制的语言，执行环境会负责管理代码执行过程中使用的内存。
开发人言不用再关心内存使用问题，所需内存的分配以及无用内存的回收完全实现了自动管理。

垃圾收集机制的原理很简单：找出那些不再继续使用的变量，然后释放其占用的内存。
为此，垃圾收集器会按照固定的时间间隔，周期性地执行这一操作。

“标记清除”（mark-and-sweep）是目前主流的垃圾收集算法：
当变量进入环境时（比如在函数中声明一个变量），就将这个变量标记为“进入环境”。
从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为可能会用到它们，而当变量离开环境时，则将其标记为“离开环境”。
垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记，然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记，
而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。
最后，垃圾收集器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。