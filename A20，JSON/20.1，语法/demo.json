/**
JSON 的语法可以表示以下三种类型的值：
1，简单值
使用与 JavaScript 相同的语法，可以在JSON中表示字符串、数值、布尔值和 null。但JSON不支持 JavaScript 中的特殊值 undefined。
2，对象
复杂数据类型，表示一组有序的键值对，每个键值对中的值可以是简单值，也可以是复杂数据类型的值。
3，数组
复杂数据类型，表示一组有序的值列表，可以通过数值索引来访问其中的值。数组的值也可以是任意类型——简单值、对象或数组。

JSON不支持变量、函数或对象实例，它就是一种表示结构化数据的格式。
*/

// 简单值
// JSON字符串必须使用双引号（单引号会导致语法错误），布尔值和null也是有效的JSON形式。
// 但在实际应用中，JSON更多地用来表示更复杂的数据结构，而简单值只是整个数据结构中的一部分。
// 5, null, "Hello", true

// 对象
// JSON中的对象要求给属性加引号。属性的值可以是简单值，也可以是复杂类型值。
// 与 JavaScript 对象字面量不同的是：JSON没有声明变量（JSON中也没有变量的概念）；其次没有末尾的分毫（因为这不是 JavaScript 语句，所以不需要分号）。


// 数组
// JSON数组采用的就是 JavaScript 中的数组字面量形式。
// [1,true,"aa"]

// 把数组和对象结合起来，可以构成更复杂的数据集合。对象和数组通常是JSON数据结构的最外层形式，利用它们能够创造出各种各样的数据结构。
        
{
  "name": "aaa",
  "checked": false,
  "age": 20,
  "id": null,
  
  "attributes": {
    // 这个属性的值也是一个对象
    // 虽然有两个“name”属性，但由于它们分别属于不同的对象，因此这样完全没有问题。不过，同一个对象中绝对不应该出现两个同名属性。
    "name": "host",
    "children": [
      "a",
      "b",
      "c"
    ]
  },
  
  "values": [
    "no",
    "123887",
    "xxx"
  ]
}
