
JavaScript，一种专为网页交互而设计的直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。
它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML网页上使用，用来给HTML网页增加动态功能。
然而现在JavaScript也可被用于网络服务器，如Node.js。

完整的JavaScript包括以下几个部分：
1，ECMAScript：描述了该语言的语法和基本对象。
2，文档对象模型（DOM）：提供访问和操作网页内容的方法和接口。
3，浏览器对象模型（BOM）：提供与浏览器交互的方法和接口。

JavaScript常用来完成以下任务：
1，嵌入动态文本于HTML页面
2，对浏览器事件作出响应
3，读写HTML元素
4，在数据被提交到服务器之前验证数据
5，检测访客的浏览器信息
6，控制cookies，包括创建和修改等

必须说明的是，虽然 JavaScript 核心语法不难，但是它的复杂性体现在另外两个方面：

首先，它涉及大量的外部API。
JavaScript要发挥作用，必须与其他组件配合，这些外部组件五花八门，数量极其庞大，几乎涉及网络应用的各个方面，掌握它们绝非易事。

其次，JavaScript语言有一些设计缺陷。
某些地方相当不合理，另一些地方则会出现怪异的运行结果。学习JavaScript，很大一部分时间是用来搞清楚哪些地方有陷阱。
另外一些程序员则感到，为了更合理地编写JavaScript程序，就不能用JavaScript来写，而必须发明新的语言，
比如CoffeeScript、TypeScript、Dart这些新语言的发明目的，多多少少都有这个因素。

尽管如此，目前看来，JavaScript的地位还是无法动摇。加之，语言标准的快速进化，使得JavaScript功能日益增强，而语法缺陷和怪异之处得到了弥补。


优秀的特性：函数、弱类型、动态对象和富有表现力的对象字面表示法。
糟糕的特性：基于全局变量的编程模型。所有编译单元的所有顶级变量被撮合到一个被称为全局对象（the global object）的公共命名空间中。
原型继承是有争议的特性。
