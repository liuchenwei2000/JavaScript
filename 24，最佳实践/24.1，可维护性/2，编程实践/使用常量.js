
/**
 * 尽管 JavaScript 没有常量的正式概念，但它还是很有用的。
 * 这种将数据从应用逻辑分离出来的思想，可以在不引入错误的同时改变数据。
 */

// 公共消息被定义于 Messages 对象中，然后函数引用这些值。
// 这种设置允许数据在无须接触使用它的函数的情况下进行变更。
// Messages 对象甚至可以完全在单独的文件中进行定义。
var Messages = {
    ERROR: "Something Error"
};

function validate(value) {
    if (!value) {
        alert(Messages.ERROR);
    }
}

/**
 * 关键在于将数据和使用它的逻辑进行分离。要注意的值的类型如下所示:
 *
 * 1，重复值
 * 任何在多处用到的值都应抽取为一个常量。这就限制了当一个值改变而另一个没变的时候会造成的错误。这也包含 CSS 类名。
 *
 * 2，用户界面字符串
 * 任何用于显示给用户的字符串，都应被抽取出来以方便国际化。
 *
 * 3，URLs
 * 在 Web 应用中，资源位置很容易变更，所以推荐用一个公共地方存放所有的 URL。
 *
 * 4，任意可能会更改的值
 * 每当在用到字面量值的时候，都要问一下自己这个值在未来是不是会变化。
 * 如果是的话，那么这个值就应该被提取出来作为一个常量。
 *
 * 对于企业级的 JavaScript 开发而言，使用常量是非常重要的技巧，因为它能让代码更容易维护，并且在数据更改的同时保护代码。
 */