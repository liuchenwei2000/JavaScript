
/**
 * 尽可能避免全局变量和函数，最多创建一个全局变量，让其他对象和函数存在其中。
 */

// 两个全局变量，需要避免
var name = "Nicholas";
function sayName(){
    alert(name);
}

// 可以创建一个包含两者的对象，从而只有一个全局变量
var MyApp = {

    name: "Nicholas",

    sayName: function () {
        alert(name);
    }
};

/**
 * 单一的全局量的延伸便是命名空间的概念
 *
 * 单一的全局对象作为一个容器，其中定义了其他对象，用这种方式将功能组合在一起的对象，叫做命名空间。
 * 命名空间要确定每个人都同意使用的全局对象的名字，并且尽可能唯一，让其他人不太可能也使用这个名字。
 */

// 创建全局对象
var LCW = {};

// 为公共功能创建命名空间
LCW.CommonJS = {};

// 添加具体功能对象
LCW.CommonJS.StringUtil = {};
LCW.CommonJS.EventUtil = {};

/**
 * 虽然命名空间会需要多写一些代码，但是对于可维护的目的而言是值得的。
 * 命名空间有助于确保代码可以在同一个页面上与其他代码以无害的方式一起工作。
 */